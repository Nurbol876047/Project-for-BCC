#!/usr/bin/env python3
"""
–ê–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä –±–∞–Ω–∫–æ–≤—Å–∫–∏—Ö –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –¥–ª—è –∫–ª–∏–µ–Ω—Ç–æ–≤
–°–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –¢–ó: 60 –∫–ª–∏–µ–Ω—Ç–æ–≤, KZT, —Ç–æ—á–Ω—ã–µ –Ω–∞–∑–≤–∞–Ω–∏—è –ø—Ä–æ–¥—É–∫—Ç–æ–≤, —Ñ–æ—Ä–º–∞—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π 180-220 —Å–∏–º–≤–æ–ª–æ–≤
"""

import pandas as pd
import numpy as np
import os
import glob
from datetime import datetime, timedelta
import re
import random
from typing import Dict, List, Tuple, Optional
import warnings
warnings.filterwarnings('ignore')

class BankProductAnalyzer:
    def __init__(self, data_path: str = "project444/", output_path: str = "output/"):
        self.data_path = data_path
        self.output_path = output_path
        self.transactions = None
        self.clients = None
        self.products = None
        
        # –ü—Ä–∞–≤–∏–ª–∞ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –ø—Ä–æ–¥—É–∫—Ç–æ–≤ —Å–æ–≥–ª–∞—Å–Ω–æ –¢–ó (–≤ KZT)
        self.product_rules = {
            '–ö–∞—Ä—Ç–∞ –¥–ª—è –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏–π': {
                'taxi': ['—Ç–∞–∫—Å–∏', 'taxi', 'uber', 'yandex'],
                'hotels': ['–æ—Ç–µ–ª—å', 'hotel', '–≥–æ—Å—Ç–∏–Ω–∏—Ü–∞', '–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ'],
                'travel': ['–ø—É—Ç–µ—à–µ—Å—Ç–≤–∏–µ', 'travel', '–∞–≤–∏–∞–±–∏–ª–µ—Ç', '–±–∏–ª–µ—Ç'],
                'currency': ['usd', 'eur', '–¥–æ–ª–ª–∞—Ä', '–µ–≤—Ä–æ', '–≤–∞–ª—é—Ç–∞']
            },
            '–ü—Ä–µ–º–∏–∞–ª—å–Ω–∞—è –∫–∞—Ä—Ç–∞': {
                'high_balance': 100000,  # KZT
                'restaurants': ['—Ä–µ—Å—Ç–æ—Ä–∞–Ω', 'restaurant', '–∫–∞—Ñ–µ', 'cafe'],
                'cosmetics': ['–∫–æ—Å–º–µ—Ç–∏–∫–∞', 'cosmetics', '–ø–∞—Ä—Ñ—é–º', 'perfume'],
                'jewelry': ['—é–≤–µ–ª–∏—Ä–Ω—ã–µ', 'jewelry', '–∑–æ–ª–æ—Ç–æ', 'gold', '—É–∫—Ä–∞—à–µ–Ω–∏—è']
            },
            '–ö—Ä–µ–¥–∏—Ç–Ω–∞—è –∫–∞—Ä—Ç–∞': {
                'categories': ['—Ç–æ–ø-–∫–∞—Ç–µ–≥–æ—Ä–∏–∏', '–æ—Å–Ω–æ–≤–Ω—ã–µ —Ç—Ä–∞—Ç—ã'],
                'online_services': ['–æ–Ω–ª–∞–π–Ω', 'online', '–ø–æ–¥–ø–∏—Å–∫–∞', 'subscription']
            },
            '–û–±–º–µ–Ω –≤–∞–ª—é—Ç': {
                'fx_operations': ['fx_buy', 'fx_sell', '–æ–±–º–µ–Ω –≤–∞–ª—é—Ç', 'currency exchange'],
                'usd_eur_spending': ['usd', 'eur', '–¥–æ–ª–ª–∞—Ä', '–µ–≤—Ä–æ']
            },
            '–î–µ–ø–æ–∑–∏—Ç –Ω–∞–∫–æ–ø–∏—Ç–µ–ª—å–Ω—ã–π': {
                'free_funds': 50000,  # KZT
                'stable_balance': True
            },
            '–î–µ–ø–æ–∑–∏—Ç —Å–±–µ—Ä–µ–≥–∞—Ç–µ–ª—å–Ω—ã–π': {
                'free_funds': 50000,  # KZT
                'stable_balance': True
            },
            '–ò–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏': {
                'free_funds': 100000,  # KZT
                'savings_interest': True
            },
            '–ö—Ä–µ–¥–∏—Ç –Ω–∞–ª–∏—á–Ω—ã–º–∏': {
                'regular_loans': True,
                'outflows_vs_inflows': 1.5  # outflows –±–æ–ª—å—à–µ inflows –≤ 1.5 —Ä–∞–∑–∞
            }
        }
        
        # TOV –ø—Ä–∞–≤–∏–ª–∞ –¥–ª—è –ø—É—à-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π (180-220 —Å–∏–º–≤–æ–ª–æ–≤, –æ–¥–∏–Ω CTA, –º–∞–∫—Å. –æ–¥–Ω–æ emoji)
        self.tov_rules = {
            '–ö–∞—Ä—Ç–∞ –¥–ª—è –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏–π': "üåç –ö–∞—Ä—Ç–∞ –¥–ª—è –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏–π —Å –∫—ç—à–±—ç–∫–æ–º –¥–æ 5% –Ω–∞ –æ—Ç–µ–ª–∏ –∏ —Ç–∞–∫—Å–∏. –ö—ç—à–±—ç–∫ 5% –Ω–∞ –ø–æ–∫—É–ø–∫–∏ –≤ –≤–∞–ª—é—Ç–µ! –û—Ñ–æ—Ä–º–∏—Ç–µ —Å–µ–π—á–∞—Å –∏ —ç–∫–æ–Ω–æ–º—å—Ç–µ –Ω–∞ –∫–∞–∂–¥–æ–π –ø–æ–µ–∑–¥–∫–µ.",
            '–ü—Ä–µ–º–∏–∞–ª—å–Ω–∞—è –∫–∞—Ä—Ç–∞': "üíé –ü—Ä–µ–º–∏–∞–ª—å–Ω–∞—è –∫–∞—Ä—Ç–∞ —Å —ç–∫—Å–∫–ª—é–∑–∏–≤–Ω—ã–º–∏ –ø—Ä–∏–≤–∏–ª–µ–≥–∏—è–º–∏. –î–æ—Å—Ç—É–ø –∫ VIP-–∑–∞–ª–∞–º –∏ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ–º—É –º–µ–Ω–µ–¥–∂–µ—Ä—É! –ü–æ–≤—ã—Å—å—Ç–µ —Å—Ç–∞—Ç—É—Å —É–∂–µ —Å–µ–≥–æ–¥–Ω—è.",
            '–ö—Ä–µ–¥–∏—Ç–Ω–∞—è –∫–∞—Ä—Ç–∞': "üí≥ –ö—Ä–µ–¥–∏—Ç–Ω–∞—è –∫–∞—Ä—Ç–∞ —Å –ª—å–≥–æ—Ç–Ω—ã–º –ø–µ—Ä–∏–æ–¥–æ–º –¥–æ 55 –¥–Ω–µ–π. –ö—ç—à–±—ç–∫ –¥–æ 3% –Ω–∞ –≤—Å–µ –ø–æ–∫—É–ø–∫–∏! –ü–æ–ª—É—á–∏—Ç–µ –∫–∞—Ä—Ç—É –∑–∞ 5 –º–∏–Ω—É—Ç –æ–Ω–ª–∞–π–Ω.",
            '–û–±–º–µ–Ω –≤–∞–ª—é—Ç': "üí± –í—ã–≥–æ–¥–Ω—ã–π –æ–±–º–µ–Ω –≤–∞–ª—é—Ç –±–µ–∑ –∫–æ–º–∏—Å—Å–∏–∏. –õ—É—á—à–∏–π –∫—É—Ä—Å –≤ –≥–æ—Ä–æ–¥–µ! –û–±–º–µ–Ω–∏–≤–∞–π—Ç–µ –≤–∞–ª—é—Ç—É –≤—ã–≥–æ–¥–Ω–æ –∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ.",
            '–î–µ–ø–æ–∑–∏—Ç –Ω–∞–∫–æ–ø–∏—Ç–µ–ª—å–Ω—ã–π': "üí∞ –ù–∞–∫–æ–ø–∏—Ç–µ–ª—å–Ω—ã–π —Å—á–µ—Ç —Å –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å—é –¥–æ 8% –≥–æ–¥–æ–≤—ã—Ö. –ù–∞—á–Ω–∏—Ç–µ –∫–æ–ø–∏—Ç—å —É–∂–µ —Å–µ–≥–æ–¥–Ω—è! –í–∞—à–∏ –¥–µ–Ω—å–≥–∏ —Ä–∞–±–æ—Ç–∞—é—Ç –Ω–∞ –≤–∞—Å.",
            '–î–µ–ø–æ–∑–∏—Ç —Å–±–µ—Ä–µ–≥–∞—Ç–µ–ª—å–Ω—ã–π': "üè¶ –°–±–µ—Ä–µ–≥–∞—Ç–µ–ª—å–Ω—ã–π —Å—á–µ—Ç —Å –≥–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–π –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å—é. –ó–∞—â–∏—Ç–∏—Ç–µ —Å–≤–æ–∏ –Ω–∞–∫–æ–ø–ª–µ–Ω–∏—è! –û—Ç–∫—Ä–æ–π—Ç–µ —Å—á–µ—Ç –∑–∞ 2 –º–∏–Ω—É—Ç—ã.",
            '–ò–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏': "üìà –ò–Ω–≤–µ—Å—Ç–∏—Ü–∏–æ–Ω–Ω—ã–π –ø–æ—Ä—Ç—Ñ–µ–ª—å —Å –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å—é –¥–æ 12% –≥–æ–¥–æ–≤—ã—Ö. –£–≤–µ–ª–∏—á—å—Ç–µ –∫–∞–ø–∏—Ç–∞–ª! –ù–∞—á–Ω–∏—Ç–µ –∏–Ω–≤–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å —Å 10 000 ‚Ç∏.",
            '–ö—Ä–µ–¥–∏—Ç –Ω–∞–ª–∏—á–Ω—ã–º–∏': "üíµ –ö—Ä–µ–¥–∏—Ç –Ω–∞–ª–∏—á–Ω—ã–º–∏ –ø–æ–¥ 15.9% –≥–æ–¥–æ–≤—ã—Ö. –†–µ—à–µ–Ω–∏–µ –∑–∞ 15 –º–∏–Ω—É—Ç! –ü–æ–ª—É—á–∏—Ç–µ –¥–µ–Ω—å–≥–∏ –Ω–∞ –ª—é–±—ã–µ —Ü–µ–ª–∏."
        }

    def load_data(self) -> bool:
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –≤—Å–µ —Ñ–∞–π–ª—ã –∏–∑ project444/"""
        try:
            # –ü–æ–∏—Å–∫ –≤—Å–µ—Ö CSV —Ñ–∞–π–ª–æ–≤ –≤ –ø–∞–ø–∫–µ project444
            csv_files = glob.glob(os.path.join(self.data_path, "*.csv"))
            
            if not csv_files:
                print(f"–§–∞–π–ª—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ {self.data_path}")
                return False
            
            dataframes = []
            for file in csv_files:
                try:
                    df = pd.read_csv(file)
                    df['source_file'] = os.path.basename(file)
                    dataframes.append(df)
                    print(f"–ó–∞–≥—Ä—É–∂–µ–Ω —Ñ–∞–π–ª: {file} ({len(df)} –∑–∞–ø–∏—Å–µ–π)")
                except Exception as e:
                    print(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞ {file}: {e}")
            
            if dataframes:
                self.transactions = pd.concat(dataframes, ignore_index=True)
                print(f"–í—Å–µ–≥–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ {len(self.transactions)} —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π")
                return True
            else:
                print("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –Ω–∏ –æ–¥–Ω–æ–≥–æ —Ñ–∞–π–ª–∞")
                return False
                
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö: {e}")
            return False

    def clean_data(self) -> None:
        """–û—á–∏—â–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ: –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞—Ç—ã, —Å—É–º–º—ã, –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
        if self.transactions is None:
            print("–î–∞–Ω–Ω—ã–µ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã")
            return
        
        print("–ù–∞—á–∏–Ω–∞–µ–º –æ—á–∏—Å—Ç–∫—É –¥–∞–Ω–Ω—ã—Ö...")
        
        # –û—á–∏—Å—Ç–∫–∞ –¥–∞—Ç —Å–æ–≥–ª–∞—Å–Ω–æ –¢–ó
        date_columns = ['date', 'transaction_date', 'created_at', 'timestamp']
        for col in date_columns:
            if col in self.transactions.columns:
                self.transactions[col] = pd.to_datetime(self.transactions[col], errors='coerce')
                print(f"–û—á–∏—â–µ–Ω–∞ –∫–æ–ª–æ–Ω–∫–∞ –¥–∞—Ç: {col}")
        
        # –û—á–∏—Å—Ç–∫–∞ —Å—É–º–º –≤ KZT —Å–æ–≥–ª–∞—Å–Ω–æ –¢–ó
        amount_columns = ['amount', 'sum', 'value', 'price', 'balance']
        for col in amount_columns:
            if col in self.transactions.columns:
                # –£–¥–∞–ª—è–µ–º –≤–∞–ª—é—Ç–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã (‚Ç∏, $, ‚Ç¨) –∏ –ø—Ä–∏–≤–æ–¥–∏–º –∫ —á–∏—Å–ª–æ–≤–æ–º—É —Ñ–æ—Ä–º–∞—Ç—É
                self.transactions[col] = self.transactions[col].astype(str).str.replace(r'[^\d.,-]', '', regex=True)
                self.transactions[col] = self.transactions[col].str.replace(',', '.')
                self.transactions[col] = pd.to_numeric(self.transactions[col], errors='coerce')
                print(f"–û—á–∏—â–µ–Ω–∞ –∫–æ–ª–æ–Ω–∫–∞ —Å—É–º–º: {col} (–≤ KZT)")
        
        # –û—á–∏—Å—Ç–∫–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–π
        category_columns = ['category', 'type', 'description', 'merchant']
        for col in category_columns:
            if col in self.transactions.columns:
                self.transactions[col] = self.transactions[col].astype(str).str.strip().str.lower()
                print(f"–û—á–∏—â–µ–Ω–∞ –∫–æ–ª–æ–Ω–∫–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–π: {col}")
        
        # –£–¥–∞–ª—è–µ–º —Å—Ç—Ä–æ–∫–∏ —Å –ø—É—Å—Ç—ã–º–∏ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏ –≤–∞–∂–Ω—ã–º–∏ –ø–æ–ª—è–º–∏ —Å–æ–≥–ª–∞—Å–Ω–æ –¢–ó
        critical_columns = ['client_code', 'client_id', 'user_id', 'customer_id']
        for col in critical_columns:
            if col in self.transactions.columns:
                self.transactions = self.transactions.dropna(subset=[col])
                print(f"–£–¥–∞–ª–µ–Ω—ã –∑–∞–ø–∏—Å–∏ —Å –ø—É—Å—Ç—ã–º {col}")
        
        print(f"–û—á–∏—Å—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –û—Å—Ç–∞–ª–æ—Å—å {len(self.transactions)} –∑–∞–ø–∏—Å–µ–π")

    def analyze_client_behavior(self, client_code: str) -> Dict:
        """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –ø–æ–≤–µ–¥–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–∞ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –ª—É—á—à–µ–≥–æ –ø—Ä–æ–¥—É–∫—Ç–∞ —Å–æ–≥–ª–∞—Å–Ω–æ –¢–ó"""
        # –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º –æ–±–∞ —Ñ–æ—Ä–º–∞—Ç–∞ –ø–æ–ª–µ–π –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
        if 'client_code' in self.transactions.columns:
            client_data = self.transactions[
                self.transactions['client_code'].astype(str) == str(client_code)
            ].copy()
        else:
            client_data = self.transactions[
                self.transactions['client_id'].astype(str) == str(client_code)
            ].copy()
        
        if len(client_data) == 0:
            return {}
        
        analysis = {
            'client_code': client_code,
            'total_transactions': len(client_data),
            'avg_balance': 0,
            'total_spending': 0,
            'categories': {},
            'currency_operations': 0,
            'online_services': 0,
            'regular_loans': 0,
            'outflows_vs_inflows': 0
        }
        
        # –ê–Ω–∞–ª–∏–∑ –±–∞–ª–∞–Ω—Å–∞
        if 'balance' in client_data.columns:
            analysis['avg_balance'] = client_data['balance'].mean()
        
        # –ê–Ω–∞–ª–∏–∑ —Ç—Ä–∞—Ç
        if 'amount' in client_data.columns:
            spending = client_data[client_data['amount'] < 0]['amount'].abs().sum()
            income = client_data[client_data['amount'] > 0]['amount'].sum()
            analysis['total_spending'] = spending
            analysis['outflows_vs_inflows'] = spending / max(income, 1)
        
        # –ê–Ω–∞–ª–∏–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–π
        if 'category' in client_data.columns:
            category_counts = client_data['category'].value_counts()
            analysis['categories'] = category_counts.to_dict()
        
        # –ê–Ω–∞–ª–∏–∑ –≤–∞–ª—é—Ç–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π
        if 'description' in client_data.columns:
            desc_text = ' '.join(client_data['description'].astype(str))
            analysis['currency_operations'] = sum(1 for word in ['usd', 'eur', '–¥–æ–ª–ª–∞—Ä', '–µ–≤—Ä–æ', 'fx_buy', 'fx_sell'] 
                                                if word in desc_text.lower())
        
        # –ê–Ω–∞–ª–∏–∑ –æ–Ω–ª–∞–π–Ω-—Å–µ—Ä–≤–∏—Å–æ–≤
        if 'description' in client_data.columns:
            desc_text = ' '.join(client_data['description'].astype(str))
            analysis['online_services'] = sum(1 for word in ['–æ–Ω–ª–∞–π–Ω', 'online', '–ø–æ–¥–ø–∏—Å–∫–∞', 'subscription'] 
                                            if word in desc_text.lower())
        
        return analysis

    def determine_best_product(self, analysis: Dict) -> Tuple[str, List[str]]:
        """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç –ª—É—á—à–∏–π –±–∞–Ω–∫–æ–≤—Å–∫–∏–π –ø—Ä–æ–¥—É–∫—Ç –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞ —Å–æ–≥–ª–∞—Å–Ω–æ –¢–ó –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç Top-4"""
        if not analysis:
            return '–î–µ–ø–æ–∑–∏—Ç –Ω–∞–∫–æ–ø–∏—Ç–µ–ª—å–Ω—ã–π', ['–î–µ–ø–æ–∑–∏—Ç –Ω–∞–∫–æ–ø–∏—Ç–µ–ª—å–Ω—ã–π', '–î–µ–ø–æ–∑–∏—Ç —Å–±–µ—Ä–µ–≥–∞—Ç–µ–ª—å–Ω—ã–π', '–ò–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏', '–ö—Ä–µ–¥–∏—Ç–Ω–∞—è –∫–∞—Ä—Ç–∞']  # –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é —Å–æ–≥–ª–∞—Å–Ω–æ –¢–ó
        
        scores = {
            '–ö–∞—Ä—Ç–∞ –¥–ª—è –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏–π': 0,
            '–ü—Ä–µ–º–∏–∞–ª—å–Ω–∞—è –∫–∞—Ä—Ç–∞': 0,
            '–ö—Ä–µ–¥–∏—Ç–Ω–∞—è –∫–∞—Ä—Ç–∞': 0,
            '–û–±–º–µ–Ω –≤–∞–ª—é—Ç': 0,
            '–î–µ–ø–æ–∑–∏—Ç –Ω–∞–∫–æ–ø–∏—Ç–µ–ª—å–Ω—ã–π': 0,
            '–î–µ–ø–æ–∑–∏—Ç —Å–±–µ—Ä–µ–≥–∞—Ç–µ–ª—å–Ω—ã–π': 0,
            '–ò–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏': 0,
            '–ö—Ä–µ–¥–∏—Ç –Ω–∞–ª–∏—á–Ω—ã–º–∏': 0
        }
        
        categories = analysis.get('categories', {})
        avg_balance = analysis.get('avg_balance', 0)
        total_spending = analysis.get('total_spending', 0)
        currency_ops = analysis.get('currency_operations', 0)
        online_services = analysis.get('online_services', 0)
        outflows_ratio = analysis.get('outflows_vs_inflows', 0)
        total_transactions = analysis.get('total_transactions', 0)
        
        # –ö–∞—Ä—Ç–∞ –¥–ª—è –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏–π (–ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç: –≤–∞–ª—é—Ç–Ω—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ + —Ç—Ä–∞—Ç—ã –Ω–∞ –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏—è)
        travel_keywords = ['—Ç–∞–∫—Å–∏', 'taxi', '–æ—Ç–µ–ª—å', 'hotel', '–ø—É—Ç–µ—à–µ—Å—Ç–≤–∏–µ', 'travel', '–∞–≤–∏–∞–±–∏–ª–µ—Ç', '–±–∏–ª–µ—Ç']
        travel_score = 0
        for category, count in categories.items():
            if any(word in category.lower() for word in travel_keywords):
                travel_score += count * 3
        
        if currency_ops > 0:
            travel_score += currency_ops * 4
        if currency_ops > 3:  # –º–Ω–æ–≥–æ –≤–∞–ª—é—Ç–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π
            travel_score += 10
        
        scores['–ö–∞—Ä—Ç–∞ –¥–ª—è –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏–π'] = travel_score
        
        # –ü—Ä–µ–º–∏–∞–ª—å–Ω–∞—è –∫–∞—Ä—Ç–∞ (–ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç: –≤—ã—Å–æ–∫–∏–π –±–∞–ª–∞–Ω—Å + –ø—Ä–µ–º–∏—É–º —Ç—Ä–∞—Ç—ã)
        premium_keywords = ['—Ä–µ—Å—Ç–æ—Ä–∞–Ω', 'restaurant', '–∫–∞—Ñ–µ', 'cafe', '–∫–æ—Å–º–µ—Ç–∏–∫–∞', 'cosmetics', '–ø–∞—Ä—Ñ—é–º', 'perfume', '—é–≤–µ–ª–∏—Ä–Ω—ã–µ', 'jewelry', '–∑–æ–ª–æ—Ç–æ', 'gold', '—É–∫—Ä–∞—à–µ–Ω–∏—è']
        premium_score = 0
        
        if avg_balance > 200000:  # –æ—á–µ–Ω—å –≤—ã—Å–æ–∫–∏–π –±–∞–ª–∞–Ω—Å –≤ KZT
            premium_score += 15
        elif avg_balance > 100000:
            premium_score += 8
        
        for category, count in categories.items():
            if any(word in category.lower() for word in premium_keywords):
                premium_score += count * 4
        
        scores['–ü—Ä–µ–º–∏–∞–ª—å–Ω–∞—è –∫–∞—Ä—Ç–∞'] = premium_score
        
        # –ö—Ä–µ–¥–∏—Ç–Ω–∞—è –∫–∞—Ä—Ç–∞ (–ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç: –æ–Ω–ª–∞–π–Ω-—Å–µ—Ä–≤–∏—Å—ã + —Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–∏–µ —Ç—Ä–∞—Ç)
        credit_score = 0
        if online_services > 0:
            credit_score += online_services * 3
        if online_services > 5:  # –º–Ω–æ–≥–æ –æ–Ω–ª–∞–π–Ω-—Å–µ—Ä–≤–∏—Å–æ–≤
            credit_score += 8
        
        if len(categories) > 5:  # –º–Ω–æ–≥–æ —Ä–∞–∑–Ω—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π
            credit_score += 6
        elif len(categories) > 3:
            credit_score += 3
        
        if total_transactions > 100:  # –∞–∫—Ç–∏–≤–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
            credit_score += 5
        
        scores['–ö—Ä–µ–¥–∏—Ç–Ω–∞—è –∫–∞—Ä—Ç–∞'] = credit_score
        
        # –û–±–º–µ–Ω –≤–∞–ª—é—Ç (–ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç: —á–∞—Å—Ç—ã–µ –≤–∞–ª—é—Ç–Ω—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏)
        currency_score = 0
        if currency_ops > 5:  # –æ—á–µ–Ω—å –º–Ω–æ–≥–æ –≤–∞–ª—é—Ç–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π
            currency_score += 15
        elif currency_ops > 2:
            currency_score += currency_ops * 3
        
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –±–∞–ª–ª—ã –∑–∞ —Ç—Ä–∞—Ç—ã –≤ –≤–∞–ª—é—Ç–µ
        currency_categories = ['usd', 'eur', '–¥–æ–ª–ª–∞—Ä', '–µ–≤—Ä–æ', '–≤–∞–ª—é—Ç–∞']
        for category, count in categories.items():
            if any(word in category.lower() for word in currency_categories):
                currency_score += count * 2
        
        scores['–û–±–º–µ–Ω –≤–∞–ª—é—Ç'] = currency_score
        
        # –î–µ–ø–æ–∑–∏—Ç—ã (–ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç: —Å—Ç–∞–±–∏–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å + —Å–≤–æ–±–æ–¥–Ω—ã–µ —Å—Ä–µ–¥—Å—Ç–≤–∞)
        deposits_score = 0
        if avg_balance > 100000 and outflows_ratio < 0.8:  # –≤—ã—Å–æ–∫–∏–π –±–∞–ª–∞–Ω—Å + –Ω–∏–∑–∫–∏–µ —Ç—Ä–∞—Ç—ã
            deposits_score += 12
        elif avg_balance > 50000 and outflows_ratio < 1.0:
            deposits_score += 8
        elif avg_balance > 30000:
            deposits_score += 4
        
        # –ë–æ–Ω—É—Å –∑–∞ —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å (–º–Ω–æ–≥–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π, –Ω–æ –Ω–µ –±–æ–ª—å—à–∏–µ —Ç—Ä–∞—Ç—ã)
        if total_transactions > 80 and outflows_ratio < 1.2:
            deposits_score += 5
        
        scores['–î–µ–ø–æ–∑–∏—Ç –Ω–∞–∫–æ–ø–∏—Ç–µ–ª—å–Ω—ã–π'] = deposits_score
        scores['–î–µ–ø–æ–∑–∏—Ç —Å–±–µ—Ä–µ–≥–∞—Ç–µ–ª—å–Ω—ã–π'] = deposits_score  # –æ–¥–∏–Ω–∞–∫–æ–≤—ã–µ –∫—Ä–∏—Ç–µ—Ä–∏–∏
        
        # –ò–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏ (–ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç: –æ—á–µ–Ω—å –≤—ã—Å–æ–∫–∏–π –±–∞–ª–∞–Ω—Å + –∏–Ω—Ç–µ—Ä–µ—Å –∫ —Å–±–µ—Ä–µ–∂–µ–Ω–∏—è–º)
        investments_score = 0
        if avg_balance > 300000:  # –æ—á–µ–Ω—å –≤—ã—Å–æ–∫–∏–π –±–∞–ª–∞–Ω—Å –≤ KZT
            investments_score += 15
        elif avg_balance > 150000:
            investments_score += 8
        
        # –ë–æ–Ω—É—Å –∑–∞ –Ω–∏–∑–∫–∏–µ —Ç—Ä–∞—Ç—ã –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ –±–∞–ª–∞–Ω—Å–∞
        if avg_balance > 100000 and outflows_ratio < 0.6:
            investments_score += 10
        
        # –ë–æ–Ω—É—Å –∑–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –≤ —Å–±–µ—Ä–µ–∂–µ–Ω–∏—è—Ö
        if total_transactions > 100 and outflows_ratio < 1.0:
            investments_score += 5
        
        scores['–ò–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏'] = investments_score
        
        # –ö—Ä–µ–¥–∏—Ç –Ω–∞–ª–∏—á–Ω—ã–º–∏ (–ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç: –≤—ã—Å–æ–∫–∏–µ —Ç—Ä–∞—Ç—ã –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ –¥–æ—Ö–æ–¥–æ–≤)
        loan_score = 0
        if outflows_ratio > 2.0:  # —Ç—Ä–∞—Ç—ã –≤ 2+ —Ä–∞–∑–∞ –±–æ–ª—å—à–µ –¥–æ—Ö–æ–¥–æ–≤
            loan_score += 15
        elif outflows_ratio > 1.5:
            loan_score += 10
        elif outflows_ratio > 1.2:
            loan_score += 5
        
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –±–∞–ª–ª—ã –∑–∞ —Ä–µ–≥—É–ª—è—Ä–Ω—ã–µ –∑–∞–π–º—ã
        if total_transactions > 100 and outflows_ratio > 1.3:
            loan_score += 8
        
        # –ë–æ–Ω—É—Å –∑–∞ –Ω–∏–∑–∫–∏–π –±–∞–ª–∞–Ω—Å –ø—Ä–∏ –≤—ã—Å–æ–∫–∏—Ö —Ç—Ä–∞—Ç–∞—Ö
        if avg_balance < 50000 and outflows_ratio > 1.5:
            loan_score += 6
        
        scores['–ö—Ä–µ–¥–∏—Ç –Ω–∞–ª–∏—á–Ω—ã–º–∏'] = loan_score
        
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—Ä–æ–¥—É–∫—Ç —Å –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–º —Å—á–µ—Ç–æ–º –∏ Top-4
        best_product = max(scores, key=scores.get)
        max_score = scores[best_product]
        
        # –ï—Å–ª–∏ –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Å—á–µ—Ç —Å–ª–∏—à–∫–æ–º –Ω–∏–∑–∫–∏–π, –≤—ã–±–∏—Ä–∞–µ–º –¥–µ–ø–æ–∑–∏—Ç –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é —Å–æ–≥–ª–∞—Å–Ω–æ –¢–ó
        if max_score < 2:
            return '–î–µ–ø–æ–∑–∏—Ç –Ω–∞–∫–æ–ø–∏—Ç–µ–ª—å–Ω—ã–π', ['–î–µ–ø–æ–∑–∏—Ç –Ω–∞–∫–æ–ø–∏—Ç–µ–ª—å–Ω—ã–π', '–î–µ–ø–æ–∑–∏—Ç —Å–±–µ—Ä–µ–≥–∞—Ç–µ–ª—å–Ω—ã–π', '–ò–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏', '–ö—Ä–µ–¥–∏—Ç–Ω–∞—è –∫–∞—Ä—Ç–∞']
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Å–ª—É—á–∞–π–Ω–æ—Å—Ç—å –¥–ª—è —Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–∏—è, –µ—Å–ª–∏ —Å—á–µ—Ç—ã –±–ª–∏–∑–∫–∏
        sorted_scores = sorted(scores.items(), key=lambda x: x[1], reverse=True)
        if len(sorted_scores) > 1 and sorted_scores[0][1] - sorted_scores[1][1] < 3:
            # –ï—Å–ª–∏ —Ä–∞–∑–Ω–∏—Ü–∞ –º–µ–∂–¥—É —Ç–æ–ø-2 –ø—Ä–æ–¥—É–∫—Ç–∞–º–∏ –Ω–µ–±–æ–ª—å—à–∞—è, –∏–Ω–æ–≥–¥–∞ –≤—ã–±–∏—Ä–∞–µ–º –≤—Ç–æ—Ä–æ–π
            if random.random() < 0.3:  # 30% —à–∞–Ω—Å –≤—ã–±—Ä–∞—Ç—å –≤—Ç–æ—Ä–æ–π –ø—Ä–æ–¥—É–∫—Ç
                best_product = sorted_scores[1][0]
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º Top-4 –ø—Ä–æ–¥—É–∫—Ç–æ–≤
        top4_products = [item[0] for item in sorted_scores[:4]]
        
        return best_product, top4_products

    def generate_push_notification(self, client_code: str, product: str) -> str:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –ø—É—à-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Å–æ–≥–ª–∞—Å–Ω–æ –¢–ó (180-220 —Å–∏–º–≤–æ–ª–æ–≤)"""
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –≥–æ—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ TOV –ø—Ä–∞–≤–∏–ª (—É–∂–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—Ç –¢–ó)
        base_message = self.tov_rules.get(product, "–°–ø–µ—Ü–∏–∞–ª—å–Ω–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è –≤–∞—Å")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–ª–∏–Ω—É –∏ –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É–µ–º –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
        if len(base_message) < 180:
            # –î–æ–±–∞–≤–ª—è–µ–º –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∞—Ü–∏—é –µ—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–æ–µ
            analysis = self.analyze_client_behavior(client_code)
            
            if product == '–ö–∞—Ä—Ç–∞ –¥–ª—è –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏–π' and analysis.get('currency_operations', 0) > 0:
                return f"üåç –ö–∞—Ä—Ç–∞ –¥–ª—è –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏–π —Å –∫—ç—à–±—ç–∫–æ–º –¥–æ 5% –Ω–∞ –æ—Ç–µ–ª–∏ –∏ —Ç–∞–∫—Å–∏. –ö—ç—à–±—ç–∫ 5% –Ω–∞ –ø–æ–∫—É–ø–∫–∏ –≤ –≤–∞–ª—é—Ç–µ! –û—Ñ–æ—Ä–º–∏—Ç–µ —Å–µ–π—á–∞—Å –∏ —ç–∫–æ–Ω–æ–º—å—Ç–µ –Ω–∞ –∫–∞–∂–¥–æ–π –ø–æ–µ–∑–¥–∫–µ."
            elif product == '–ü—Ä–µ–º–∏–∞–ª—å–Ω–∞—è –∫–∞—Ä—Ç–∞' and analysis.get('avg_balance', 0) > 100000:
                return f"üíé –ü—Ä–µ–º–∏–∞–ª—å–Ω–∞—è –∫–∞—Ä—Ç–∞ —Å —ç–∫—Å–∫–ª—é–∑–∏–≤–Ω—ã–º–∏ –ø—Ä–∏–≤–∏–ª–µ–≥–∏—è–º–∏. –î–æ—Å—Ç—É–ø –∫ VIP-–∑–∞–ª–∞–º –∏ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ–º—É –º–µ–Ω–µ–¥–∂–µ—Ä—É! –ü–æ–≤—ã—Å—å—Ç–µ —Å—Ç–∞—Ç—É—Å —É–∂–µ —Å–µ–≥–æ–¥–Ω—è."
            elif product == '–ö—Ä–µ–¥–∏—Ç–Ω–∞—è –∫–∞—Ä—Ç–∞':
                return f"üí≥ –ö—Ä–µ–¥–∏—Ç–Ω–∞—è –∫–∞—Ä—Ç–∞ —Å –ª—å–≥–æ—Ç–Ω—ã–º –ø–µ—Ä–∏–æ–¥–æ–º –¥–æ 55 –¥–Ω–µ–π. –ö—ç—à–±—ç–∫ –¥–æ 3% –Ω–∞ –≤—Å–µ –ø–æ–∫—É–ø–∫–∏! –ü–æ–ª—É—á–∏—Ç–µ –∫–∞—Ä—Ç—É –∑–∞ 5 –º–∏–Ω—É—Ç –æ–Ω–ª–∞–π–Ω."
            elif product == '–û–±–º–µ–Ω –≤–∞–ª—é—Ç':
                return f"üí± –í—ã–≥–æ–¥–Ω—ã–π –æ–±–º–µ–Ω –≤–∞–ª—é—Ç –±–µ–∑ –∫–æ–º–∏—Å—Å–∏–∏. –õ—É—á—à–∏–π –∫—É—Ä—Å –≤ –≥–æ—Ä–æ–¥–µ! –û–±–º–µ–Ω–∏–≤–∞–π—Ç–µ –≤–∞–ª—é—Ç—É –≤—ã–≥–æ–¥–Ω–æ –∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ."
            elif product in ['–î–µ–ø–æ–∑–∏—Ç –Ω–∞–∫–æ–ø–∏—Ç–µ–ª—å–Ω—ã–π', '–î–µ–ø–æ–∑–∏—Ç —Å–±–µ—Ä–µ–≥–∞—Ç–µ–ª—å–Ω—ã–π']:
                return f"üí∞ –ù–∞–∫–æ–ø–∏—Ç–µ–ª—å–Ω—ã–π —Å—á–µ—Ç —Å –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å—é –¥–æ 8% –≥–æ–¥–æ–≤—ã—Ö. –ù–∞—á–Ω–∏—Ç–µ –∫–æ–ø–∏—Ç—å —É–∂–µ —Å–µ–≥–æ–¥–Ω—è! –í–∞—à–∏ –¥–µ–Ω—å–≥–∏ —Ä–∞–±–æ—Ç–∞—é—Ç –Ω–∞ –≤–∞—Å."
            elif product == '–ò–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏':
                return f"üìà –ò–Ω–≤–µ—Å—Ç–∏—Ü–∏–æ–Ω–Ω—ã–π –ø–æ—Ä—Ç—Ñ–µ–ª—å —Å –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å—é –¥–æ 12% –≥–æ–¥–æ–≤—ã—Ö. –£–≤–µ–ª–∏—á—å—Ç–µ –∫–∞–ø–∏—Ç–∞–ª! –ù–∞—á–Ω–∏—Ç–µ –∏–Ω–≤–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å —Å 10 000 ‚Ç∏."
            elif product == '–ö—Ä–µ–¥–∏—Ç –Ω–∞–ª–∏—á–Ω—ã–º–∏':
                return f"üíµ –ö—Ä–µ–¥–∏—Ç –Ω–∞–ª–∏—á–Ω—ã–º–∏ –ø–æ–¥ 15.9% –≥–æ–¥–æ–≤—ã—Ö. –†–µ—à–µ–Ω–∏–µ –∑–∞ 15 –º–∏–Ω—É—Ç! –ü–æ–ª—É—á–∏—Ç–µ –¥–µ–Ω—å–≥–∏ –Ω–∞ –ª—é–±—ã–µ —Ü–µ–ª–∏."
        
        return base_message

    def validate_push_quality(self, push_notification: str) -> Dict[str, bool]:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∫–∞—á–µ—Å—Ç–≤–æ –ø—É—à-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —Å–æ–≥–ª–∞—Å–Ω–æ –¢–ó (4√ó5 –±–∞–ª–ª–æ–≤)"""
        quality_checks = {
            'length_180_220': 180 <= len(push_notification) <= 220,
            'one_cta': push_notification.count('!') <= 1,  # –º–∞–∫—Å–∏–º—É–º –æ–¥–Ω–æ –≤–æ—Å–∫–ª–∏—Ü–∞–Ω–∏–µ
            'one_emoji': sum(1 for char in push_notification if ord(char) > 127 and len(char.encode('utf-8')) > 1) <= 1,  # –º–∞–∫—Å–∏–º—É–º –æ–¥–Ω–æ emoji
            'proper_formatting': bool(re.search(r'\d+', push_notification))  # —Å–æ–¥–µ—Ä–∂–∏—Ç —á–∏—Å–ª–∞
        }
        return quality_checks

    def process_all_clients(self) -> pd.DataFrame:
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—Å–µ—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤ –∏ —Å–æ–∑–¥–∞–µ—Ç –∏—Ç–æ–≥–æ–≤—ã–π DataFrame"""
        if self.transactions is None:
            print("–î–∞–Ω–Ω—ã–µ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã")
            return pd.DataFrame()
        
        # –ü–æ–ª—É—á–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤ —Å–æ–≥–ª–∞—Å–Ω–æ –¢–ó
        client_columns = ['client_code', 'client_id', 'user_id', 'customer_id']
        client_col = None
        for col in client_columns:
            if col in self.transactions.columns:
                client_col = col
                break
        
        if client_col is None:
            print("–ù–µ –Ω–∞–π–¥–µ–Ω–∞ –∫–æ–ª–æ–Ω–∫–∞ —Å ID –∫–ª–∏–µ–Ω—Ç–æ–≤")
            return pd.DataFrame()
        
        unique_clients = self.transactions[client_col].unique()
        print(f"–ù–∞–π–¥–µ–Ω–æ {len(unique_clients)} —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤")
        
        results = []
        
        for client_code in unique_clients:
            print(f"–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–ª–∏–µ–Ω—Ç–∞: {client_code}")
            
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–æ–≤–µ–¥–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–∞
            analysis = self.analyze_client_behavior(client_code)
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ª—É—á—à–∏–π –ø—Ä–æ–¥—É–∫—Ç –∏ Top-4
            best_product, top4_products = self.determine_best_product(analysis)
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø—É—à-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
            push_notification = self.generate_push_notification(client_code, best_product)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞—á–µ—Å—Ç–≤–æ –ø—É—à-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
            quality_checks = self.validate_push_quality(push_notification)
            
            # –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ —Å–æ–≥–ª–∞—Å–Ω–æ –¢–ó
            result = {
                'client_code': client_code,
                'product': best_product,
                'push_notification': push_notification,
                'top4_products': '|'.join(top4_products),  # Top-4 –ø—Ä–æ–¥—É–∫—Ç—ã —á–µ—Ä–µ–∑ —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å
                'push_quality_score': sum(quality_checks.values()),  # –æ–±—â–∏–π –±–∞–ª–ª –∫–∞—á–µ—Å—Ç–≤–∞ (0-4)
                'total_transactions': analysis.get('total_transactions', 0),
                'avg_balance': analysis.get('avg_balance', 0),
                'total_spending': analysis.get('total_spending', 0),
                'currency_operations': analysis.get('currency_operations', 0),
                'online_services': analysis.get('online_services', 0),
                'outflows_vs_inflows': analysis.get('outflows_vs_inflows', 0)
            }
            
            results.append(result)
        
        return pd.DataFrame(results)

    def process_hidden_test(self, hidden_data_path: str = "hidden_test/") -> pd.DataFrame:
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–∫—Ä—ã—Ç—ã–π —Ç–µ—Å—Ç–æ–≤—ã–π –Ω–∞–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö —Å–æ–≥–ª–∞—Å–Ω–æ –¢–ó"""
        if not os.path.exists(hidden_data_path):
            print(f"–°–∫—Ä—ã—Ç—ã–π —Ç–µ—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ {hidden_data_path}")
            return pd.DataFrame()
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ
        original_transactions = self.transactions
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–∫—Ä—ã—Ç—ã–µ –¥–∞–Ω–Ω—ã–µ
        self.transactions = None
        self.data_path = hidden_data_path
        
        if not self.load_data():
            print("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å–∫—Ä—ã—Ç—ã–µ –¥–∞–Ω–Ω—ã–µ")
            self.transactions = original_transactions
            return pd.DataFrame()
        
        # –û—á–∏—â–∞–µ–º —Å–∫—Ä—ã—Ç—ã–µ –¥–∞–Ω–Ω—ã–µ
        self.clean_data()
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–∫—Ä—ã—Ç—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤
        hidden_results = self.process_all_clients()
        
        # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        self.transactions = original_transactions
        self.data_path = "project444/"
        
        return hidden_results

    def save_results(self, results_df: pd.DataFrame) -> None:
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ CSV —Ñ–∞–π–ª —Å–æ–≥–ª–∞—Å–Ω–æ –¢–ó"""
        os.makedirs(self.output_path, exist_ok=True)
        
        # –û—Å–Ω–æ–≤–Ω–æ–π —Ñ–∞–π–ª result.csv —Å–æ–≥–ª–∞—Å–Ω–æ –¢–ó: —Ç–æ–ª—å–∫–æ client_code, product, push_notification
        main_file = os.path.join(self.output_path, "result.csv")
        main_df = results_df[['client_code', 'product', 'push_notification']].copy()
        main_df.to_csv(main_file, index=False, encoding='utf-8')
        print(f"–û—Å–Ω–æ–≤–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ {main_file}")
        
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π —Ñ–∞–π–ª —Å –º–µ—Ç—Ä–∏–∫–∞–º–∏ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
        summary_file = os.path.join(self.output_path, "summary_by_client.csv")
        results_df.to_csv(summary_file, index=False, encoding='utf-8')
        print(f"–î–µ—Ç–∞–ª—å–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ {summary_file}")
        
        print(f"–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ {len(results_df)} –∫–ª–∏–µ–Ω—Ç–æ–≤")

    def run_analysis(self) -> None:
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –ø–æ–ª–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —Å–æ–≥–ª–∞—Å–Ω–æ –¢–ó"""
        print("=== –ê–ù–ê–õ–ò–ó –ë–ê–ù–ö–û–í–°–ö–ò–• –ü–†–û–î–£–ö–¢–û–í (–¢–ó) ===")
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ
        if not self.load_data():
            print("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ")
            return
        
        # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ
        self.clean_data()
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤—Å–µ—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤ (60 –∫–ª–∏–µ–Ω—Ç–æ–≤ —Å–æ–≥–ª–∞—Å–Ω–æ –¢–ó)
        results = self.process_all_clients()
        
        if not results.empty:
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
            self.save_results(results)
            
            # –í—ã–≤–æ–¥–∏–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            print("\n=== –°–¢–ê–¢–ò–°–¢–ò–ö–ê ===")
            print("–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–æ–≤:")
            print(results['product'].value_counts())
            
            print(f"\n–ö–∞—á–µ—Å—Ç–≤–æ –ø—É—à-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π:")
            print(f"–°—Ä–µ–¥–Ω–∏–π –±–∞–ª–ª –∫–∞—á–µ—Å—Ç–≤–∞: {results['push_quality_score'].mean():.2f}/4")
            print(f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π —Å –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–º –∫–∞—á–µ—Å—Ç–≤–æ–º: {(results['push_quality_score'] == 4).sum()}")
            
            print(f"\n–í—Å–µ–≥–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ –∫–ª–∏–µ–Ω—Ç–æ–≤: {len(results)}")
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–∫—Ä—ã—Ç—ã–π —Ç–µ—Å—Ç –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–µ–Ω
            print("\n=== –û–ë–†–ê–ë–û–¢–ö–ê –°–ö–†–´–¢–û–ì–û –¢–ï–°–¢–ê ===")
            hidden_results = self.process_hidden_test()
            if not hidden_results.empty:
                hidden_file = os.path.join(self.output_path, "hidden_test_results.csv")
                hidden_results[['client_code', 'product', 'push_notification']].to_csv(hidden_file, index=False, encoding='utf-8')
                print(f"–†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–∫—Ä—ã—Ç–æ–≥–æ —Ç–µ—Å—Ç–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ {hidden_file}")
                print(f"–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ —Å–∫—Ä—ã—Ç—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤: {len(hidden_results)}")
            else:
                print("–°–∫—Ä—ã—Ç—ã–π —Ç–µ—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –ø—É—Å—Ç")
        else:
            print("–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –∫–ª–∏–µ–Ω—Ç–æ–≤")

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    analyzer = BankProductAnalyzer()
    analyzer.run_analysis()

if __name__ == "__main__":
    main()
